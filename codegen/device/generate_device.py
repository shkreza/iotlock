from yaml import load as yload

swagger_filepath = '/Users/vsa/Code/azure/iot/lock/backend/api/lock_api.yaml'

def read_swagger(filepath):
    with open(filepath, 'rt') as y:
        swagger = yload(y)
        return  swagger
    return None

def get_api_paths(swagger):
    return swagger['paths'] if 'paths' in swagger else []

def get_swagger_parameters(swagger):
    return swagger['parameters'] if 'parameters' in swagger else {}

def get_api_post_method(swagger_path):
    return swagger_path['post'] if 'post' in swagger_path else None

def get_api_get_method(swagger_path):
    return swagger_path['get'] if 'get' in swagger_path else None

def get_api_method_summary(swagger_method):
    return swagger_method['summary'] if 'summary' in swagger_method else 'N/A'

def get_api_method_description(swagger_method):
    return swagger_method['description'] if 'description' in swagger_method else 'N/A'

def get_api_method_operation_id(swagger_method):
    return swagger_method['operationId'] if 'operationId' in swagger_method else 'N/A'

def get_api_method_parameters(swagger_method):
    return swagger_method['parameters'] if 'parameters' in swagger_method else []

def get_api_method_responses(swagger_method):
    return swagger_method['responses'] if 'responses' in swagger_method else []

DIRECT_METHOD_CALLBACK_BLOB = '''
## DEVICE CODE GENERATED BY IOT-SWAGGER
def device_direct_methods_callback_swagger(method_name, payload, user_context)):
{method_indent}device_method_return_value = DeviceMethodReturnValue()
    
{method_indent}{implemented_methods}
    
{method_indent}device_method_return_value.status = 501
{method_indent}device_method_return_value.response = '{{{{ "Response": "Method \"{{method_name}}\"not implemented." }}}}'.format(method_name=method_name)
{method_indent}return device_method_return_value
'''

METHOD_BLOB = '''
{method_indent}# AUTO GENERATED METHOD
{method_indent}# OperationId of {method_type} on \'{method_path}\'
{method_indent}# operationId: \'{method_operation_id}\'
{method_indent}# summary: \'{method_summary}\'
{method_indent}# description: \'{method_description}\'
{method_indent}if method_name == \'{method_operation_id}\':
{method_indent}{INDENT}# TODO: EXTRACTED METHDO PARAMETERS
{method_indent}{INDENT}{method_parameters_code}

{method_indent}{INDENT}# TODO: ADD YOUR IMPLEMENTATION HERE
{method_indent}{INDENT}device_method_return_value.status = 400
{method_indent}{INDENT}device_method_return_value.response = '{{ \"Response\": \"Default response.\" }}'
{method_indent}{INDENT}return device_method_return_value
'''

method_descriptor = {
    'INDENT': '\t',
    'method_indent': '\t',
    'method_type': 'POST',
    'method_path': '/api/v0/lock',
    'method_operation_id': 'lock_post',
    'method_summary': 'Lock the lock',
    'method_description': 'Lock the lock',
    'method_parameters_code': 'x_device_id = payload[\'http_headers\'][\'x-device-id\']',
    'method_responses': '# TBD'
}

def generate_method_parameters_code(method_parameters, parameters):
    return '# TBD'

def generate_callback_code(filepath):
    swagger = read_swagger(filepath)
    parameters = get_swagger_parameters(swagger)
    paths = get_api_paths(swagger)

    methods_code = ''

    for path, path_spec in paths.items():
        get_method = get_api_get_method(path_spec)
        if get_method:
            method_parameters_code = generate_method_parameters_code(
                get_api_method_parameters(get_method),
                parameters)
            method_responses = get_api_method_responses(get_method)

            method_descriptor = {
                'INDENT': '\t',
                'method_indent': '\t',
                'method_type': 'GET',
                'method_path': path,
                'method_operation_id': get_api_method_operation_id(get_method),
                'method_summary': get_api_method_summary(get_method),
                'method_description': get_api_method_description(get_method),
                'method_parameters_code': method_parameters_code,
                'method_responses': method_responses
            }
            methods_code += METHOD_BLOB.format(**method_descriptor)

        post_method = get_api_post_method(path_spec)
        if post_method:
            method_parameters_code = generate_method_parameters_code(
                get_api_method_parameters(post_method),
                parameters)
            method_responses = get_api_method_responses(post_method)

            method_descriptor = {
                'INDENT': '\t',
                'method_indent': '\t',
                'method_type': 'POST',
                'method_path': path,
                'method_operation_id': get_api_method_operation_id(post_method),
                'method_summary': get_api_method_summary(post_method),
                'method_description': get_api_method_description(post_method),
                'method_parameters_code': method_parameters_code,
                'method_responses': method_responses
            }
            methods_code += METHOD_BLOB.format(**method_descriptor)
    
    callback_descriptor = {
            'method_indent': '\t',
            'implemented_methods': methods_code
        }
    
    direct_methods_callback_code = DIRECT_METHOD_CALLBACK_BLOB.format(
        **callback_descriptor
    )
    
    return direct_methods_callback_code

def main():
    code = generate_callback_code(swagger_filepath)
    print(code)

if __name__ == '__main__':
    main()